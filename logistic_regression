# -*- coding: utf-8 -*-
"""logistic_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s5A_egSjgaF-7pU0OXiUSYzXXQCyGx8J
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.rcParams["font.family"] = "Serif"
plt.rcParams["font.serif"] = "Times New Roman"
import seaborn as sns


from google.colab import drive
drive.mount('/content/drive/')

X1 = pd.read_csv("/content/drive/MyDrive/SVM Classifier/M1-RC2/m1_rc2_40-50_1.csv")
X2 = pd.read_csv("/content/drive/MyDrive/SVM Classifier/M1-RC2/m1_rc2_40-50_2.csv")

df1 =pd.DataFrame(np.vstack([X1['RA'],X1['AF']]).T,columns=['Y1','Y2'])
df1['Y']=0
df2 =pd.DataFrame(np.vstack([X2['RA'],X2['AF']]).T,columns=['Y1','Y2'])
df2['Y']=1
df = df1.append(df2)
df.head()

### Independent and Dependent features
X = df.iloc[:, :2]  
y = df.Y

## Split the dataset into train and test
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=0)
y_train

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)
accuracy_score(y_test, y_pred)

##final visualization
#plt_1 = plt.figure(figsize=(10, 6))
hfont = {'fontname':'Times New Roman'}

from matplotlib.colors import ListedColormap
X_set, Y_set = X_train, y_train
x1, x2 = np.meshgrid(np.arange(start = X_set[:,0].min() -1, stop = X_set[:, 0].max() +1, step = 0.01),
                     np.arange(start = X_set[:,1].min() -1, stop = X_set[:, 1].max() +1, step = 0.01))

plt.contourf(x1,x2, classifier.predict(np.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),
             alpha = 0.75, cmap = ListedColormap(('#F7EC09','#251D3A')), **hfont)

plt.xlim(x1.min(), x2.max())
plt.ylim(x2.min(), x2.max())
for i, j in enumerate(np.unique(Y_set)):
    plt.scatter(X_set[Y_set == j, 0], X_set[Y_set == j,1],
                c = ListedColormap(('#F7EC09','#251D3A'))(i), label = j)
plt.title('M1-RC2 Specimen ( 40 mins - 50 mins)', **hfont)
plt.rcParams["font.family"] = "Times New Roman"
plt.xlabel('RA Value', **hfont)
plt.ylabel('Average Frequency', **hfont)
plt.legend()
plt.savefig("M1-RC2-40-50.png", format="png", dpi=600)
plt.show()

##final visualization

from matplotlib.colors import ListedColormap
X_set, Y_set = X_train, y_train
x1, x2 = np.meshgrid(np.arange(start = X_set[:,0].min() -1, stop = X_set[:, 0].max() +1, step = 0.01),
                     np.arange(start = X_set[:,1].min() -1, stop = X_set[:, 1].max() +1, step = 0.01))

plt.contourf(x1,x2, classifier.predict(np.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),
             alpha = 0.75, cmap = ListedColormap(('#3AB0FF', '#F77E21')))

plt.xlim(x1.min(), x2.max())
plt.ylim(x2.min(), x2.max())
for i, j in enumerate(np.unique(Y_set)):
    plt.scatter(X_set[Y_set == j, 0], X_set[Y_set == j,1],
                c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('Logistic Regression ( Training set)')
plt.xlabel('RA Value')
plt.ylabel('Average Frequency')
plt.legend()
plt.show()

##final visualization
plt_1 = plt.figure(figsize=(10, 6))

from matplotlib.colors import ListedColormap
X_set, Y_set = X_train, y_train
x1, x2 = np.meshgrid(np.arange(start = X_set[:,0].min() -1, stop = X_set[:, 0].max() +1, step = 0.01),
                     np.arange(start = X_set[:,1].min() -1, stop = X_set[:, 1].max() +1, step = 0.01))

plt.contourf(x1,x2, classifier.predict(np.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),
             alpha = 0.75, cmap = ListedColormap(('#F7EC09','#251D3A')))

plt.xlim(x1.min(), x2.max())
plt.ylim(x2.min(), x2.max())
for i, j in enumerate(np.unique(Y_set)):
    plt.scatter(X_set[Y_set == j, 0], X_set[Y_set == j,1],
                c = ListedColormap(('#F7EC09','#251D3A'))(i), label = j)
plt.title('Logistic Regression ( Training set)')
plt.xlabel('RA Value')
plt.ylabel('Average Frequency')
plt.legend(['Tensile', 'Shear'])
plt.show()

##final visualization
#plt_1 = plt.figure(figsize=(10, 6))
hfont = {'fontname':'Times New Roman'}

from matplotlib.colors import ListedColormap
X_set, Y_set = X_train, y_train
x1, x2 = np.meshgrid(np.arange(start = X_set[:,0].min() -1, stop = X_set[:, 0].max() +1, step = 0.01),
                     np.arange(start = X_set[:,1].min() -1, stop = X_set[:, 1].max() +1, step = 0.01))

plt.contourf(x1,x2, classifier.predict(np.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),
             alpha = 0.75, cmap = ListedColormap(('#F7EC09','#251D3A')), **hfont)

plt.xlim(x1.min(), x2.max())
plt.ylim(x2.min(), x2.max())
for i, j in enumerate(np.unique(Y_set)):
    plt.scatter(X_set[Y_set == j, 0], X_set[Y_set == j,1],
                c = ListedColormap(('#F7EC09','#251D3A'))(i), label = j)
plt.title('M1-RC1 Specimen ( 10 mins - 20 mins)', **hfont)
plt.rcParams["font.family"] = "Times New Roman"
plt.xlabel('RA Value', **hfont)
plt.ylabel('Average Frequency', **hfont)
plt.legend()
#plt.savefig("M1-RC1-10-20.png", format="png", dpi=600)
plt.show()
